<link rel="stylesheet" href="../stylesheets/road-id.css" />
<script src="https://api.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.js"></script>
<link
  href="https://api.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.css"
  rel="stylesheet"
/>

<div class="routeId">
  <div class="single-road-main">
    <div class="routeIdDescription">
      {{! description of road: name, length, distance, and stuff below map }}
      <h2>{{road.name}}</h2>
      <h4>by User:  {{road.userName}}</h4>
      {{!-- <h3>{{road.country}}</h3> --}}
      <h4>Distance: {{road.length}} km</h4>
      <h4>Duration: {{road.duration}} minutes</h4>
      <p>Description: {{road.description}}</p>
    </div>

    <div class="routeIdSectionOne">

      
      <div class="RouteIdMap">
        <div id="map"></div>
        {{! mapbox of road on top 100% width }}
      </div>

      <div class="routeIdPictures">
        <img src="{{road.imageUrl}}" alt="Hier ist ein Bild">
        {{! pictures of uploaded road at bottom }}
      </div>
      
    </div>
  </div>
</div>

<script>
  // TO MAKE THE MAP APPEAR YOU MUST // ADD YOUR ACCESS TOKEN FROM //
  mapboxgl.accessToken =
  "pk.eyJ1IjoiaGVpbGlnZXJodWVnZWwiLCJhIjoiY2t3YXh5Y2l1MXk1dTJ3cWxlMTZvZ2FqdCJ9.yck0GJzLuAQfrYHahudOdA";

  const map = new mapboxgl.Map({ 
    container: 'map',
    style: "mapbox://styles/heiligerhuegel/ckvwgwlvq4wrj14m37krtmygg",
    //style:'mapbox://styles/mapbox/streets-v11',
    center: [({{road.waypoints.[0].[1]}}+{{road.waypoints.[1].[1]}})/2,({{road.waypoints.[0].[0]}}+{{road.waypoints.[1].[0]}})/2], // starting position
    zoom: 5
});


// an arbitrary start will always be the same

const startPoint = [{{road.waypoints.[0].[1]}},{{road.waypoints.[0].[0]}}];


const endPoint = [{{road.waypoints.[1].[1]}},{{road.waypoints.[1].[0]}}];

const start = startPoint;
const end = endPoint;




// create a function to make a directions request
async function getRoute(end) {
  // make a directions request using cycling profile
  // an arbitrary start will always be the same
  // only the end or destination will change
  const query = await fetch(
    `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${mapboxgl.accessToken}`,
    { method: 'GET' }
  );
  const json = await query.json();
  const data = json.routes[0];
  const route = data.geometry.coordinates;
  const geojson = {
    type: 'Feature',
    properties: {},
    geometry: {
      type: 'LineString',
      coordinates: route
    }
  };
  // if the route already exists on the map, we'll reset it using setData

  if (map.getSource('route')) {
    map.getSource('route').setData(geojson);
  }
  // otherwise, we'll make a new request
  else {
    map.addLayer({
      id: 'route',
      type: 'line',
      source: {
        type: 'geojson',
        data: geojson
      },
      layout: {
        'line-join': 'round',
        'line-cap': 'round'
      },
      paint: {
        'line-color': '#3887be',
        'line-width': 5,
        'line-opacity': 0.75
      }
    });
  }
  // add turn instructions here at the end
}

map.on('load', () => {
  // make an initial directions request that
  // starts and ends at the same location
  getRoute(end);

  // Add starting point to the map
  map.addLayer({
    id: 'point',
    type: 'circle',
    source: {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: [
          {
            type: 'Feature',
            properties: {},
            geometry: {
              type: 'Point',
              coordinates: start
            }
          }
        ]
      }
    },
    paint: {
      'circle-radius': 10,
      'circle-color': '#3887be'
    }
  });

    map.addLayer({
      id: 'end',
      type: 'circle',
      source: {
        type: 'geojson',
        data: {
          type: 'FeatureCollection',
          features: [
            {
              type: 'Feature',
              properties: {},
              geometry: {
                type: 'Point',
                coordinates: end
              }
            }
          ]
        }
      },
      paint: {
        'circle-radius': 10,
        'circle-color': '#f30'
      }
    });

});
</script>