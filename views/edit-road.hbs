<link rel="stylesheet" href="../stylesheets/road-id.css" />
<script src="https://api.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.js"></script>
<link
  href="https://api.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.css"
  rel="stylesheet"
/>
<script
  src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"
></script>
<link
  rel="stylesheet"
  href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css"
  type="text/css"
/>
<div  class="create-route-main column">
  <div class="edit-road-row">
    <div id="map" style="width: 35vw; height: 55vh; margin-top: 80px;"></div>


    <form style="display: flex; flex-direction:column;" action="/edit-road/{{road.id}}" method="POST">

      <label for="name">Route Name:</label>
      <input name="name" required type="text" value="{{road.name}}" >

      <label for="description">Description:</label>
      <textarea name="description" required type="text" value="{{road.description}}" id="description"></textarea>

      <label hidden for="distance" >Distance(Km):</label>
      <input hidden readonly type="text" name="distance" id="distance" value="{{road.length}}">

      <label hidden for="duration">Duration(Minutes):</label>
      <input hidden readonly type="text" name="duration" id="duration" value="{{road.duration}}">

      <label hidden for="start">Start-Coordinates:</label>
      <input hidden readonly type="text" name="start" id="start">

      <label hidden for="end">End-Coordinates:</label>
      <input hidden readonly type="text" name="end" id="end" >

      {{!-- <input type="file" name="roadImage" /> --}}

      <button type="submit">Submit</button>
    </form>
  </div>
  <div class="edit-delete">

  <form action="/edit-road/delete/{{road.id}}" method="POST">
  <label for="name">Delete this Route:</label>
  <button type="submit">I want to delete this Route!</button>
  </form>

  </div>

</div>



<script>

mapboxgl.accessToken =
    'pk.eyJ1IjoiaGVpbGlnZXJodWVnZWwiLCJhIjoiY2t3YXh5Y2l1MXk1dTJ3cWxlMTZvZ2FqdCJ9.yck0GJzLuAQfrYHahudOdA';
const map = new mapboxgl.Map({
    container: 'map',
    style: "mapbox://styles/heiligerhuegel/ckvwgwlvq4wrj14m37krtmygg",
    //style: 'mapbox://styles/mapbox/streets-v11',
    center: [({{road.waypoints.[0].[1]}}+{{road.waypoints.[1].[1]}})/2,({{road.waypoints.[0].[0]}}+{{road.waypoints.[1].[0]}})/2],
    zoom: 0
});

const startPoint = [{{road.waypoints.[0].[1]}},{{road.waypoints.[0].[0]}}];
const endPoint = [{{road.waypoints.[1].[1]}},{{road.waypoints.[1].[0]}}];
const start = startPoint;
const end = endPoint;


const directions = new MapboxDirections({
    accessToken: mapboxgl.accessToken,
    steps: false,
    profile: "mapbox/driving",

    gemetries: "polyline",
    controls: {
        instructions: false
    }
})

//map.addControl(directions, 'top-left');


// create a function to make a directions request
async function getRoute(end) {
  // make a directions request using cycling profile
  // an arbitrary start will always be the same
  // only the end or destination will change
  const query = await fetch(
    `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${mapboxgl.accessToken}`,
    { method: 'GET' }
  );
  const json = await query.json();
  const data = json.routes[0];
  const route = data.geometry.coordinates;
  const geojson = {
    type: 'Feature',
    properties: {},
    geometry: {
      type: 'LineString',
      coordinates: route
    }
  };
  // if the route already exists on the map, we'll reset it using setData

  if (map.getSource('route')) {
    map.getSource('route').setData(geojson);
  }
  // otherwise, we'll make a new request
  else {
    map.addLayer({
      id: 'route',
      type: 'line',
      source: {
        type: 'geojson',
        data: geojson
      },
      layout: {
        'line-join': 'round',
        'line-cap': 'round'
      },
      paint: {
        'line-color': '#3887be',
        'line-width': 5,
        'line-opacity': 0.75
      }
    });
  }
  // add turn instructions here at the end
}

map.on('load', () => {
  // make an initial directions request that
  // starts and ends at the same location
  getRoute(end);

  // Add starting point to the map
  map.addLayer({
    id: 'point',
    type: 'circle',
    source: {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: [
          {
            type: 'Feature',
            properties: {},
            geometry: {
              type: 'Point',
              coordinates: start
            }
          }
        ]
      }
    },
    paint: {
      'circle-radius': 10,
      'circle-color': '#3887be'
    }
  });

  map.addLayer({
      id: 'end',
      type: 'circle',
      source: {
        type: 'geojson',
        data: {
          type: 'FeatureCollection',
          features: [
            {
              type: 'Feature',
              properties: {},
              geometry: {
                type: 'Point',
                coordinates: end
              }
            }
          ]
        }
      },
      paint: {
        'circle-radius': 10,
        'circle-color': '#f30'
      }
    });

});

map.on("load", () => {
    directions.on("route", (event) => {
        let distance = Math.round(Number(event.route[0].distance) / 1000)

        let distanceInput = document.getElementById("distance")
        distanceInput.setAttribute("value", distance)
        
        let duration = Math.round(Number(event.route[0].duration) / 60)
        let durationInput = document.getElementById("duration")
        durationInput.setAttribute("value", duration)

        let startInput = document.getElementById("start")
        startInput.setAttribute("value", event.route[0].legs[0].steps[0].maneuver.location)

        let endInput = document.getElementById("end")
        endInput.setAttribute("value", event.route[0].legs[0].steps[event.route[0].legs[0].steps.length-1].maneuver.location)
        
    })
})
</script>

  

{{!  event.route[0].distance(meters)
event.route[0].duration (seconds)
event.route[0].legs[0].steps[0].maneuver.location
event.route[0].legs[0].steps[event.route[0].legs[0].steps.length-1].maneuver.location}} 
